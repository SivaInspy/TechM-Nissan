import sys, time
from utility import getLotDays, getClaimsMIS, parseOptions_udf, getLastUpdatedSolrTimestamp
from pyspark.sql import SparkSession
from pyspark.sql.types import *
from pyspark.sql.functions import *

zookeeper_host = sys.argv[1]
database = sys.argv[2]
collection = sys.argv[3]
legacyCollection = sys.argv[4]

spark = SparkSession.builder.appName("Claims Solr Indexing").enableHiveSupport().getOrCreate()
rawData = spark.sql("SELECT * from " + database + ".wrnty_clm_vhcl_solr_crnt_vw").withColumnRenamed("crte_ts", "bde_wrnty_add_dt").withColumn("rcvd_pfp_cstmr_stsfcn_team_ds", upper(col("rcvd_pfp_cstmr_stsfcn_team_ds"))).withColumn("rcvd_pfp_cmpnt_cstmr_stsfcn_team_ds", upper(col("rcvd_pfp_cmpnt_cstmr_stsfcn_team_ds"))).withColumn("plnt_cd_nm", upper(col("plnt_cd_nm"))).withColumn("extnd_wrnty_in", upper(col("extnd_wrnty_in"))). withColumn("vhcl_mnfctr_cmpny_nm", upper(col("vhcl_mnfctr_cmpny_nm"))).withColumn("vhcl_mk_nm", upper(col("vhcl_mk_nm")))
app_lst_updt_ts=spark.sql("select max(updt_ts) from " + database + ".wrnty_clm_vhcl_solr_crnt_vw")
lst_updt = getLastUpdatedSolrTimestamp('clm_solr_lst_dt', database, spark)
#spark.sql("select case when from_unixtime(unix_timestamp("+str(lst_updt)+", 'MM/dd/yyyy HH:mm:ss.SSSSSS')) > max(updt_ts)  from " + database + ".wrnty_clm_vhcl_solr_crnt_vw")
withLotDays = getLotDays(rawData, spark)
withLotDays.registerTempTable("withLotDays")
filtered = spark.sql("SELECT * FROM withLotDays WHERE lot_days_changed OR unix_timestamp(updt_ts) > unix_timestamp('" + lst_updt + "')")
withClaimsMIS = getClaimsMIS(filtered, spark)
withFactoryOptions = withClaimsMIS.withColumn("fctry_optns_arr", parseOptions_udf(filtered.fctry_optns_tx)).drop("fctry_optns_tx").withColumnRenamed("fctry_optns_arr", "fctry_optns_tx")
withGenericOptions = withFactoryOptions.withColumn("gnrc_optns_arr", parseOptions_udf(withFactoryOptions.gnrc_optns_tx)).drop("gnrc_optns_tx").withColumnRenamed("gnrc_optns_arr", "gnrc_optns_tx").cache()

indexable = withGenericOptions.select(
"lot_dy_nb",
"claims_mis",
"max_orgnl_lbr_oprtn_cd",
"lbr_oprtn_cd",
"lbr_hr_nb",
"prt_qt",
"prt_nb",
"prmry_lbr_oprtn_cd",
"prmry_orgnl_lbr_oprtn_cd",
"svc_oprtn_prmry_in",
"pfp_nb_ds",
"svc_prt_cst_qt_ds",
"orgnl_lbr_oprtn_nm",
"oprtn_lctn_ds",
"oprtn_lctn_cd",
"lbr_oprtn_hr_nm",
"orgnl_lbr_oprtn_ds",
"pfp_ds",
"vin_id",
"vhcl_ln_yr_nb",
"nml_prdctn_mdl_cd",
"rcvd_pfp_cstmr_stsfcn_team_ds",
"rcvd_pfp_cmpnt_cstmr_stsfcn_team_ds",
"vhcl_sls_mdl_cd",
"vhcl_engn_srl_nb",
"vhcl_clr_cd",
"trm_cd",
"mnfctr_vhcl_plnt_cd",
"mnfctg_dt",
"in_svc_dt",
"glbl_mrkt_cd",
"poe_dstbtn_fclty_cd",
"cvrg_clas_cd",
"svc_dlr_rgn_nm",
"svc_dlr_st_cd",
"svc_dlr_nb",
"svc_dlr_nm",
"svc_dlr_phn_nb",
"vhcl_rpr_dt",
"dlr_rpr_ordr_nb",
"vhcl_mlg_nb",
"wrnty_symptm_cd",
"wrnty_symptm_ds",
"wrnty_trbl_cd",
"wrnty_trbl_ds",
"cstmr_cmnt_tx",
"tchncn_cmnt_tx",
"dlr_lbr_am",
"dlr_prt_am",
"dstrbr_clm_nb",
"dlr_sblt_am",
"clm_dstrbr_lbr_am",
"clm_dstrbr_prt_am",
"fctry_ivntry_trnsfr_dt",
"tlmtcs_svc_vndr_cd",
"svc_dlr_pstl_cd",
"nci_vhcl_srs_cd",
"vhcl_lst_rplcd_km_nb",
"vhcl_lst_rplcd_mlg_nb",
"rcvd_pfp_1st_5_ds",
"fqi_wrnty_pfp_nb",
"dlr_totl_am",
"sld_in",
"vhcl_prdctn_src_cd",
"tlmtcs_in",
"clm_net_am",
"clm_dstrbr_totl_am",
"drv_trn_cd",
"vhcl_engn_mdl_cd",
"trnmsn_typ_cd",
"trnmsn_typ_nm",
"cv_in",
"vhcl_crshd_in",
"emsn_crtfct_nb",
"emsn_typ_cd",
"vhcl_flt_in",
"ivntry_sts_cd",
"vhcl_yr_nb",
"nci_ivntry_sts_cd",
"nci_lctn_sts_cd",
"plnt_cd_nm",
"bdy_styl_nm",
"eim_cd",
"extr_clr_cd",
"extr_clr_nm",
"vhcl_ln_cd",
"vhcl_ln_nm",
"nci_optn_grp_cd",
"vhcl_nci_mdl_cd",
"nhtsa_vhcl_typ_cd",
"vhcl_nmc_mdl_cd",
"trm_lvl_ds",
"fctry_shp_dt",
"nci_ivntry_added_dt",
"nmc_rcpt_dt",
"orgnl_rtl_dt",
"orgnl_in_svc_dt",
"orgnl_whlsl_dt",
"orgnl_rtl_dlr_nb",
"rtl_dlr_nb",
"orgnl_rtl_dlr_cty_nm",
"orgnl_rtl_st_cd",
"rtl_dlr_cty_nm",
"rtl_dlr_st_cd",
"orgnl_whlsl_dlr_st_cd",
"whlsl_dlr_nb",
"whlsl_dlr_st_cd",
"invc_drft_dt",
"nci_orgnl_rtl_typ_cd",
"orgnl_rtl_dlr_cntry_cd",
"orgnl_rtl_dlr_st_cd",
"orgnl_whlsl_dlr_cntry_cd",
"orgnl_whlsl_dlr_nb",
"orgnl_whlsl_dlr_cty_nm",
"whlsl_dlr_cty_nm",
"vhcl_nmc_mdl_nm",
"cntry_cd",
"vhcl_typ_cd",
"trm_cd_nm",
"bdy_styl_cd",
"prdctn_mdl_srs_cd",
"emsn_typ_nm",
"fctry_optns_tx",
"vhcl_pltfrm_cd",
"mnfctg_mnth_yr_dt",
"mnfctg_yr_dt",
"mnfctg_dy_dt",
"in_svc_mnth_yr_dt",
"rtl_sl_lse_dt",
"orgnl_in_svc_mnth_yr_dt",
"engn_prfx_8_dgt_cd",
"vhcl_lctn_cd",
"vhcl_clsftn_cd",
"vhcl_clsftn_grp_cd",
"vhcl_mk_cd",
"vhcl_mk_nm",
"vhcl_frgmt_in",
"cmpnt_cstmr_stsfcn_team_cd",
"cstmr_stsfcn_team_cd",
"rgn_engnr_nm",
"blng_prcs_in",
"clm_cvrg_cd",
"clm_dstrbr_cd",
"clm_typ_cd",
"cvrg_itm_cd",
"wrnty_btry_dgnstc_cd",
"wrnty_bsns_typ_cd",
"vhf_rcrd_typ_cd",
"wrnty_clm_sts_cd",
"wrnty_aflt_rpt_exclsn_rfrnc_nb",
"plnt_asgnmt_cd",
"rqstd_cvrg_cd",
"rcvd_pfp_1st_5_nb",
"wrnty_orgnl_pnc_id",
"clm_dt",
"prts_rplc_dt",
"clm_fncl_dsbrmt_dt_nb",
"crdt_sm_rpt_yr_mnth_dt",
"crdt_sm_rpt_dt",
"vhcl_km_nb",
"clm_wo_opn_dt",
"aflt_dlr_nb",
"src_splr_id",
"glbl_splr_nb",
"rcvd_pfp_splr_nb",
"vhcl_rpr_st_cd",
"vhcl_prdctn_mdl_srs_cd",
"wrnty_pfp_nb",
"rcvd_pfp_nb",
"rpt_exclsn_in",
"clm_bsns_typ_cd",
"wrnty_clm_nb",
"orgnl_symptm_cd",
"orgnl_trbl_cd",
"drvd_pfp_1st_5_nb",
"jdpwr_cd",
"pnc_id",
"svc_dy_cn",
"pnc_typ_cd",
"wrnty_clm_blng_cd",
"prt_nm_cmpnt_cd",
"clm_rcvry_am",
"fqi_grp_cd",
"fqi_grp_nm",
"cnsdtd_pfp_nb",
"dstrbr_nm",
"rgn_nm",
"vhcl_prdctn_bld_dt",
"pnc_nm",
"rspsbl_engnr_nm",
"dstrbr_totl_orgnl_crncy_am",
"pnc_ds",
"wrnty_engnr_nm",
"vhcl_in_svc_dt",
"sts_dt",
"vhcl_mnfctr_cmpny_nm",
"wrnty_dis_am",
"extnd_wrnty_in",
"wrnty_clm_mdfctn_dt",
"btry_12_volt_srl_nb",
"rcvd_pfp_splr_nm",
"src_splr_nm",
"cvrg_clas_ds",
"trd_cd",
"totl_lbr_hr_nb",
"clm_dstrbr_sblt_am")

indexable.write.format("solr").option("zkhost", zookeeper_host).option("collection", collection).option("batch_size", "10000").save()

legacyIndexable = withGenericOptions.selectExpr(
"aflt_dlr_nb",
"bdy_styl_nm",
"blng_prcs_in",
"btry_12_volt_srl_nb",
"claims_mis",
"wrnty_clm_mdfctn_dt AS claims_mod_dt",
"clm_cvrg_cd",
"clm_dstrbr_cd",
"clm_dstrbr_lbr_am",
"clm_dstrbr_prt_am",
"clm_dstrbr_totl_am",
"clm_dt",
"clm_fncl_dsbrmt_dt_nb",
"clm_rcvry_am",
"clm_typ_cd",
"clm_wo_opn_dt",
"cnsdtd_pfp_nb",
"crdt_sm_rpt_dt",
"rcvd_pfp_cmpnt_cstmr_stsfcn_team_ds AS cst_cmpnnt_ds",
"rcvd_pfp_cstmr_stsfcn_team_ds AS cst_ds",
"cv_in",
"cvrg_clas_cd",
"cvrg_itm_cd",
"dlr_lbr_am",
"rcvd_pfp_1st_5_ds AS dlr_pfp_ds",
"dlr_prt_am",
"dlr_rpr_ordr_nb",
"dlr_sblt_am",
"dlr_totl_am",
"drv_trn_cd",
"drvd_pfp_1st_5_nb",
"dstrbr_clm_nb",
"eim_cd",
"emsn_crtfct_nb",
"emsn_typ_cd",
"extnd_wrnty_in AS extnd_wrnty",
"extr_clr_cd",
"extr_clr_nm",
"fctry_ivntry_trnsfr_dt",
"fctry_optns_tx",
"fctry_shp_dt",
"fqi_grp_nm",
"glbl_mrkt_cd",
"glbl_splr_nb",
"gnrc_optns_tx",
"invc_drft_dt",
"ivntry_sts_cd",
"jdpwr_cd AS jd_pwr_cd",
"lot_dy_nb AS lot_days",
"mnfctg_dt",
"mnfctg_mnth_yr_dt AS mnfctg_dt_mnth_yr",
"nci_ivntry_added_dt",
"nci_ivntry_sts_cd",
"nci_lctn_sts_cd",
"nci_optn_grp_cd",
"nci_vhcl_srs_cd",
"nhtsa_vhcl_typ_cd",
"nmc_rcpt_dt",
"nml_prdctn_mdl_cd",
"orgnl_in_svc_dt",
"max_orgnl_lbr_oprtn_cd AS orgnl_lbr_codes",
"CAST(orgnl_lbr_oprtn_ds AS STRING) AS orgnl_lbr_opr_desc",
"prmry_orgnl_lbr_oprtn_cd AS orgnl_lbr_oprtn_cd_primary_y",
"orgnl_rtl_dlr_cty_nm",
"orgnl_rtl_dlr_nb",
"orgnl_rtl_dt",
"orgnl_rtl_st_cd",
"orgnl_whlsl_dt",
"pfp_ds",
"plnt_asgnmt_cd",
"plnt_cd_nm",
"pnc_ds",
"pnc_nm",
"poe_dstbtn_fclty_cd",
"CAST(orgnl_lbr_oprtn_nm AS STRING) AS prmry_op_cd_desc",
"prt_nb",
"prt_nm_cmpnt_cd",
"prt_qt",
"prts_rplc_dt",
"rcvd_pfp_1st_5_nb",
"rcvd_pfp_splr_nb",
"rgn_engnr_nm",
"rgn_nm",
"rpt_exclsn_in",
"rqstd_cvrg_cd",
"rspsbl_engnr_nm AS rspsbl_engnr",
"rtl_dlr_cty_nm",
"rtl_dlr_nb",
"rtl_dlr_st_cd",
"IF(sld_in, 'Y', 'N') AS sold_flag",
"src_splr_id",
"svc_dlr_nb",
"svc_dlr_nm",
"svc_dlr_phn_nb",
"svc_dlr_rgn_nm",
"svc_dlr_st_cd AS svc_dlr_st_nm",
"IF(svc_oprtn_prmry_in, 'Y', 'N') AS svc_oprtn_prmry_in",
"wrnty_symptm_ds AS symptm_ds",
"IF(tlmtcs_in, 'Y', 'N') AS tlmtcs_in",
"wrnty_trbl_ds AS trbl_ds",
"trd_cd",
"trm_cd",
"trm_lvl_ds",
"trnmsn_typ_cd",
"trnmsn_typ_nm",
"vhcl_clr_cd",
"vhcl_crshd_in",
"vhcl_engn_mdl_cd",
"vhcl_engn_srl_nb",
"vhcl_flt_in",
"vhf_rcrd_typ_cd AS vhcl_hs_fl_rcrd_typ_cd",
"vhcl_km_nb",
"vhcl_ln_cd",
"vhcl_ln_nm",
"vhcl_lst_rplcd_km_nb",
"vhcl_lst_rplcd_mlg_nb",
"vhcl_mk_nm",
"vhcl_mlg_nb",
"vhcl_nci_mdl_cd",
"vhcl_nmc_mdl_cd",
"vhcl_mnfctr_cmpny_nm AS vhcl_prd_rgn_desc",
"vhcl_prdctn_mdl_srs_cd",
"vhcl_prdctn_src_cd",
"vhcl_rpr_dt",
"vhcl_rpr_st_cd",
"vhcl_sls_mdl_cd",
"vhcl_yr_nb",
"vin_id",
"whlsl_dlr_nb",
"wrnty_aflt_rpt_exclsn_rfrnc_nb",
"wrnty_bsns_typ_cd",
"wrnty_btry_dgnstc_cd",
"wrnty_clm_nb",
"wrnty_clm_sts_cd",
"cvrg_clas_ds AS wrnty_cls_cd_desc",
"cstmr_cmnt_tx AS wrnty_cust_cmnt",
"wrnty_engnr_nm",
"oprtn_lctn_cd AS wrnty_loc_cd",
"oprtn_lctn_ds AS wrnty_loc_desc",
"lbr_oprtn_hr_nm AS wrnty_op_cd_hrs_desc",
"wrnty_orgnl_pnc_id",
"src_splr_nm AS wrnty_pfp_fncl_splr_desc",
"wrnty_pfp_nb",
"rcvd_pfp_splr_nm AS wrnty_pfp_rcvd_splr_desc",
"svc_prt_cst_qt_ds AS wrnty_prt_cst_qt_ds",
"wrnty_dis_am AS wrnty_prt_days_in_svc",
"pfp_nb_ds AS wrnty_rpr_prt_nb_ds",
"wrnty_symptm_cd",
"tchncn_cmnt_tx AS wrnty_tech_cmnt",
"wrnty_trbl_cd",
"clm_dstrbr_sblt_am",
"CAST(from_unixtime(unix_timestamp(bde_wrnty_add_dt,  'MM/dd/yyyy HH:mm:ss.SSSSSS'), 'yyyy-MM-dd') AS DATE) bde_wrnty_add_dt",
"totl_lbr_hr_nb")

legacyIndexable.write.format("solr").option("zkhost", zookeeper_host).option("collection", legacyCollection).option("batch_size", "10000").save()

spark.stop()

